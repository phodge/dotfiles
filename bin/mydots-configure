#!/usr/bin/env python3
import argparse
import json
import re
import sys
from pathlib import Path
from subprocess import run
from typing import Dict

SETTINGS_PATH_VIM = Path("~/.vim/settings.vim").expanduser()
STATE_PATH = Path("~/.config/mydots.json").expanduser()

VIM_GLOBAL_RE = re.compile(r"^\s*let\s+g:(\w+)\s*=\s*(\d+)$")


SETTINGS_NAMES = {
    'want_copilot',
    'want_neovim_treesitter',
    'want_neovim_treesitter_python',
    'want_neovim_snippy',
}


class State:
    def __init__(self) -> None:
        self._state = self._read_state()

    def asdict(self) -> Dict[str, int]:
        return self._state

    def get_setting(self, name: str, default: int) -> int:
        assert name in SETTINGS_NAMES
        return self._state.get(name, default)

    def update_setting(self, name: str, value: int) -> None:
        assert name in SETTINGS_NAMES
        self._state[name] = value
        self._write_state()
        self._write_settings_vim()

    def get_state(self, name: str, default: int) -> int:
        assert name not in SETTINGS_NAMES
        return self._state.get(name, default)

    def update_state(self, name: str, value: int) -> None:
        assert name not in SETTINGS_NAMES
        self._state[name] = value
        self._write_state()

    def _read_state(self) -> Dict[str, int]:
        if not STATE_PATH.exists():
            return {}

        state: Dict[str, int] = {}

        with STATE_PATH.open('r') as f:
            data = json.load(f)
            for name, value in data.items():
                if not isinstance(value, int):
                    err(f"{STATE_PATH.name}: Non-integer value for {name!r}")
                    continue
                state[name] = value

        return state

    def _write_state(self) -> None:
        STATE_PATH.parent.mkdir(exist_ok=True)
        with STATE_PATH.open('w') as f:
            json.dump(self._state, f, indent=2, sort_keys=True)

    def _write_settings_vim(self) -> None:
        with SETTINGS_PATH_VIM.open('w') as f:
            for name, value in self._state.items():
                if name in SETTINGS_NAMES:
                    f.write(f"let g:{name} = {int(value)}\n")


def yesno(prompt: str, *, default: int, automatic: bool) -> int:
    if automatic:
        return default

    y = 'Y' if default else 'y'
    n = 'n' if default else 'N'

    while True:
        sys.stderr.write(prompt)
        sys.stderr.write(f' [{y}/{n}]: ')
        sys.stderr.flush()
        answer = sys.stdin.readline().strip().lower()
        if answer == '':
            return default
        if answer in ('Y', 'y', 'yes', '1'):
            return 1
        if answer in ('N', 'n', 'no', '0'):
            return 0
        sys.stderr.write("ERROR: Please answer with 'y' or 'n'\n")


def yesno_setting(
    prompt: str,
    name: str,
    *,
    state: State,
    default: int,
    automatic: bool,
) -> int:
    new_value = yesno(
        prompt,
        default=state.get_setting(name, default),
        automatic=automatic,
    )
    state.update_setting(name, int(new_value))
    return new_value


# TODO: it would be nice to only ask about this when I have specified Y to using neovim during
# Homely installation
def setup_copilot(
    *,
    state: State,
    automatic: bool,
) -> None:
    want_copilot = yesno_setting(
        'Use GitHub Copilot in Neovim?',
        'want_copilot',
        default=0,
        state=state,
        automatic=automatic,
    )

    # prompt to run ':Copilot setup' if this hasn't been done yet
    if want_copilot \
            and not automatic \
            and not state.get_state('copilot_installed', 0):
        if yesno(
            'Run ":Copilot setup" now?',
            default=1,
            automatic=False,
        ):
            cmd = [
                'nvim',
                '+Copilot setup',
                #'+qall',
            ]
            run(cmd, check=True)
            state.update_state('copilot_installed', 1)


def setup_treesitter(
    *,
    state: State,
    automatic: bool,
) -> None:
    # TODO: would be good to only ask this when neovim is wanted
    want_treesitter = yesno_setting(
        'Use Treesitter in Neovim?',
        'want_neovim_treesitter',
        default=0,
        state=state,
        automatic=automatic,
    )

    if want_treesitter:
        yesno_setting(
            'Use Treesitter for PYTHON in Neovim?',
            'want_neovim_treesitter_python',
            default=1,
            state=state,
            automatic=automatic,
        )
    else:
        state.update_setting('want_neovim_treesitter_python', 0)

    # prompt to run ':TSInstall ...' commands if they haven't been done yet
    if want_treesitter \
            and not automatic \
            and not state.get_state('treesitter_installed', 0):
        if yesno(
            'Install treesitter parsers now?',
            default=1,
            automatic=False,
        ):
            for command in [
                'TSInstall typescript',
                'TSInstall tsx',
                'TSInstall javascript',
                'TSInstall python',
            ]:
                run(['nvim', '+' + command], check=True)
            state.update_state('treesitter_installed', 1)


def main(automatic: bool, print_json: bool) -> None:
    state = State()

    setup_copilot(state=state, automatic=automatic or print_json)
    setup_treesitter(state=state, automatic=automatic or print_json)
    yesno_setting(
        'Use dcampos/nvim-snippy for snippets in Neovim?',
        'want_neovim_snippy',
        default=0,
        state=state,
        automatic=automatic or print_json,
    )

    if print_json:
        json.dump(state.asdict(), sys.stdout, indent=2, sort_keys=True)
        sys.exit(0)

    if not automatic:
        print("NOTE: to use LSP for TypeScript/JavaScript in neovim:")
        # TODO: what packages?
        print("  - Make sure your project's package.json includes TypeScript for type checking")
        print("  - Make sure your project's package.json includes an .eslintrc file")
        print("  - Make sure your project's package.json includes prettier for code formatting")
        print("  - Launch neovim with the 'n2' shell alias")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--automatic',
        action='store_true',
        help="Fill out any config settings that are missing",
    )
    parser.add_argument(
        '--print-json',
        action='store_true',
        help="Instead of being interactive, just print out the current settings values",
    )
    args = parser.parse_args()
    main(automatic=args.automatic, print_json=args.print_json)
