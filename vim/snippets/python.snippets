snippet err
	import pprint, sys
	sys.stderr.write('${2:$1} = {}\n'.format(pprint.pformat(${1:locals()})))  # noqa TODO
snippet out
	import pprint
	print('${2:$1} = ' + pprint.pformat(${1:locals()}))  # noqa TODO
snippet outl
	print('${2:$1} = [')  # TODO
	for _ in ${1:locals()}:
		print('  '+repr(_)+',')
	print(']')
snippet errl
	import sys
	sys.stderr.write('${2:$1} = [\n')  # TODO
	for _ in ${1:locals()}:
		sys.stderr.write('  '+repr(_)+',\n')
	sys.stderr.write(']\n')
snippet outd
	print('${2:$1} = {')  # TODO
	for _ in ${1:locals()}.items():
		print('  '+repr(_[0])+': '+repr(_[1])+',')
	print('}')
snippet errd
	import stderr
	sys.stderr.write('${2:$1} = {\n')  # TODO
	for _ in ${1:locals()}.items():
		sys.stderr.write('  '+repr(_[0])+': '+repr(_[1])+',\n')
	sys.stderr.write('}\n')
snippet lxml
	from lxml.html import tostring
	print('========== <${2:$1}> ==========\n%s\n========== </${2:$1}> =========' % tostring(${1:locals()}))  # noqa
snippet log
	with open('/tmp/q', 'a') as _f:  # TODO
		_f.write('${2:$1} = %r\n' % (${1:locals()}, ))  # noqa
snippet logl
	with open('/tmp/q', 'a') as _f:  # TODO
		_f.write('${2:$1} = [\n')
		for _ in ${1:locals()}:
			_f.write('  '+repr(_)+',\n')
		_f.write(']\n')
snippet logd
	with open('/tmp/q', 'a') as _f:  # TODO
		_f.write('${2:$1} = {\n')
		for _ in ${1:locals()}.items():
			_f.write('  '+repr(_[0])+': '+repr(_[1])+',\n')
		_f.write('}\n')
snippet loge
	try:
	except:
		with open('/tmp/q', 'a') as _f:  # TODO
			import sys
			import traceback
			_f.write("".join(traceback.format_exception(*sys.exc_info())))
snippet logcall
	with open('/tmp/q', 'a') as _f:  # TODO
		import inspect  # noqa
		${1:_f.write(self.__class__.__name__)}
		_f.write(inspect.getframeinfo(inspect.currentframe()).funtion)
		_f.write('()\n')
snippet dir
	__expr = ${1:locals()}  # TODO: remove this debug
	print('${2:$1} = %s:' % type(__expr))
	for _ in dir(__expr):
		if not hasattr(__expr, _):
			print('  .%s = <not set>' % _)
		elif callable(getattr(__expr, _)):
			print('  .%s()' % _)
		else:
			print('  .%s = %r' % (_, getattr(__expr, _)))
	print('}')
	del __expr  # TODO: remove this debug
snippet errdir
	import sys
	__expr = ${1:locals()}  # TODO: remove this debug
	print('${2:$1} = %s:' % type(__expr), file=sys.stderr)
	for _ in dir(__expr):
		if not hasattr(__expr, _):
			print('  .%s = <not set>' % _, file=sys.stderr)
		elif callable(getattr(__expr, _)):
			print('  .%s()' % _, file=sys.stderr)
		else:
			print('  .%s = %r' % (_, getattr(__expr, _)), file=sys.stderr)
	print('}', file=sys.stderr)
	del __expr  # TODO: remove this debug
snippet logdir
	with open('/tmp/q', 'a') as _f:  # TODO
		__expr = ${1:locals()}  # TODO: remove this debug
		_f.write('${2:$1} = %s:\n' % type(__expr))
		for _ in dir(__expr):
			if not hasattr(__expr, _):
				_f.write('  .%s = <not set>\n' % _)
			elif callable(getattr(__expr, _)):
				_f.write('  .%s()\n' % _)
			else:
				_f.write('  .%s = %r\n' % (_, getattr(__expr, _)))
		_f.write('}\n')
		del __expr  # TODO: remove this debug
snippet q
	import q
	q(${1:locals()})
snippet qfake
	print('${2:$1} (simulated!):\n%s\n' % str(${1:query}.statement.compile(compile_kwargs={"literal_binds": True})))  # noqa TODO
snippet qreal
	print('${2:$1} (compiled):\n%s\n' % str(${1:query}.statement))  # noqa TODO
snippet qlog
	__query = ${1:str(query.statement)}
	with open('${2:/tmp/q}', 'a') as fp:  # TODO: remove this debug
		fp.write('\n')
		fp.write('=' * 79)
		fp.write('\n')
		for __phrase in ['GROUP BY', 'WHERE', 'FROM', 'HAVING', 'ORDER BY', '(INNER\s+|OUTER\s+|LEFT\s+)*JOIN']:  # noqa
			__query = __query.replace(' '+__phrase, '\n'+__phrase)
		__query = __query.replace(', ', ',\n   ')
		#__query = __query % tuple(['VALUE1', 'VALUE2'])
		fp.write(__query)
		del __query
snippet main
	if __name__ == "__main__":
		${1:main()}
snippet rev
	reveal_type(${1:locals()})  # noqa: F821
